/*
 * -------------------------------------------------
 *  nf-core/prottemplate Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
  outdir = './results'
  
  tracedir = "${params.outdir}/pipeline_info"
  description_correct_features = 0
}


// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda {
    process.conda = "$baseDir/environment.yml"
    cacheDir = "$baseDir/work/conda"
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    process.container ='veitveit/prolineworkflow:dev'
    docker.runOptions = '-u $(id -u):$(id -g)'
  }
  singularity { singularity.enabled = true }
  test { includeConfig 'conf/test.config' }
}


// Capture exit codes from upstream processes when piping


// Function to ensure that resource requirements don't go beyond a maximum limit
// Modified by david-bouyssie to always use the values defined in "params" (fallback to default if the value can't be interpreted)
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      return params.max_memory as nextflow.util.MemoryUnit
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      return params.max_time as nextflow.util.Duration
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return params.max_cpus as int
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
