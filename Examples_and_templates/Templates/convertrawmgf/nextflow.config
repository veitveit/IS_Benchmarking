/*
 * -------------------------------------------------
 *  nf-core/prottemplate Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
  outdir = './results'

  // workflow defaults
  peptide_min_length = 8
  peptide_max_length = 12
  fragment_mass_tolerance = 0.02
  precursor_mass_tolerance = 5
  fragment_bin_offset = 0
  fdr_threshold = 0.01
  fdr_level = 'peptide-level-fdrs'
  number_mods = 3
  num_hits = 1
  digest_mass_range = "800:2500"
  pick_ms_levels = 2
  run_centroidisation = false
  prec_charge = '2:3'
  activation_method = 'ALL'
  enzyme = 'unspecific cleavage'
  fixed_mods = ''
  max_rt_alignment_shift = 300
  spectrum_batch_size = 500
  variable_mods = 'Oxidation (M)'
  tracedir = "${params.outdir}/pipeline_info"
  description_correct_features = 0
  klammer = false
}


// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda {
  process.conda = "$baseDir/environment.yml"
  cacheDir = "$baseDir/work/conda"
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    process.container='quay.io/biocontainers/thermorawfileparser:1.1.2--0'
    docker.runOptions = '-u $(id -u):$(id -g)'
  }
  singularity { singularity.enabled = true }
  test { includeConfig 'conf/test.config' }
}


// Capture exit codes from upstream processes when piping


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
